blueprint:
  name: IKEA STYRBAR control for color bulbs (Zigbee2MQTT)
  description: >
    Controle lâmpadas com o controle remoto IKEA STYRBAR de quatro botões (os quadrados), para uso com Zigbee2MQTT.

    Esta blueprint permite controlar o brilho, ligar/desligar e mudar cores das lâmpadas compatíveis, utilizando o Zigbee2MQTT.

  domain: automation
  input:
    remote_name:
      name: Nome do Controle Remoto
      description: O nome do controle remoto conforme configurado no Zigbee2MQTT.
      selector:
        text: {}
    base_topic:
      name: Tópico Base MQTT
      description: O tópico base configurado no Zigbee2MQTT (normalmente é 'zigbee2mqtt').
      default: zigbee2mqtt
      selector:
        text: {}
    light:
      name: Luz(es)
      description: A(s) luz(es) a serem controladas
      selector:
        target:
          entity:
            domain: light
    force_brightness:
      name: Forçar brilho ao ligar
      description: Força o brilho para o nível definido abaixo quando o botão "ligar" no controle remoto é pressionado.
      default: false
      selector:
        boolean: {}
    brightness:
      name: Brilho
      description: Brilho da(s) luz(es) ao ligar (0 a 100%)
      default: 50
      selector:
        number:
          min: 0
          max: 100
          unit_of_measurement: '%'
          mode: slider
    hold_time:
      name: Tempo de Manter Pressionado
      description: Tempo entre a execução das ações de aumentar/diminuir brilho ao manter pressionado o botão correspondente.
      default: 0.2
      selector:
        number:
          min: 0.1
          max: 2.0
          step: 0.1
          unit_of_measurement: segundos
          mode: slider
    color_set:
      name: Lista de Cores e Temperaturas
      description: Selecione (ou crie) um helper listando as cores para usar com os botões esquerdo e direito.
      selector:
        entity:
          domain: input_select
    button_left_long:
      name: Botão Esquerdo - Pressão Longa
      description: Ação a ser executada ao manter pressionado o botão esquerdo.
      default: []
      selector:
        action: {}
    button_right_long:
      name: Botão Direito - Pressão Longa
      description: Ação a ser executada ao manter pressionado o botão direito.
      default: []
      selector:
        action: {}

variables:
  force_brightness: !input force_brightness
  color_set: !input color_set
  z2m_base_topic: !input base_topic
  z2m_controller: !input remote_name

trigger:
  - platform: mqtt
    topic: "{{ z2m_base_topic }}/{{ z2m_controller }}/action"

action:
  - variables:
      command: "{{ trigger.payload }}"
  - choose:
    - conditions:
        # Botão de Cima (Ligar) - Pressão Curta
        - condition: template
          value_template: "{{ command == '1_short_release' }}"
      sequence:
        - choose:
            - conditions: '{{ force_brightness }}'
              sequence:
                - service: light.turn_on
                  target: !input light
                  data:
                    transition: 1
                    brightness_pct: !input brightness
            default:
              - service: light.turn_on
                target: !input light
                data:
                  transition: 1

    - conditions:
        # Botão de Baixo (Desligar) - Pressão Curta
        - condition: template
          value_template: "{{ command == '2_short_release' }}"
      sequence:
        - service: light.turn_off
          target: !input light
          data:
            transition: 1

    - conditions:
        # Botão de Cima - Pressão Longa
        - condition: template
          value_template: "{{ command == '1_long_press' }}"
      sequence:
        - service: script.turn_on
          target:
            entity_id: script.increase_brightness
        - service: input_boolean.turn_on
          entity_id: input_boolean.up_button_held

    - conditions:
        # Botão de Cima - Liberação da Pressão Longa
        - condition: template
          value_template: "{{ command == '1_long_release' }}"
      sequence:
        - service: input_boolean.turn_off
          entity_id: input_boolean.up_button_held

    - conditions:
        # Botão de Baixo - Pressão Longa
        - condition: template
          value_template: "{{ command == '2_long_press' }}"
      sequence:
        - service: script.turn_on
          target:
            entity_id: script.decrease_brightness
        - service: input_boolean.turn_on
          entity_id: input_boolean.down_button_held

    - conditions:
        # Botão de Baixo - Liberação da Pressão Longa
        - condition: template
          value_template: "{{ command == '2_long_release' }}"
      sequence:
        - service: input_boolean.turn_off
          entity_id: input_boolean.down_button_held

    - conditions:
        # Botão Esquerdo - Pressão Curta
        - condition: template
          value_template: "{{ command == '3_short_release' }}"
      sequence:
        - service: input_select.select_previous
          data:
            entity_id: !input color_set
        - service: light.turn_on
          target: !input light
          data: >
            {% set inputval = states(color_set) %}
            {% set color_attrs = {} %}
            {% if inputval|int(-1) != -1 %}
              {% set color_attrs = {'color_temp_kelvin': inputval} %}
            {% elif inputval.startswith('#') %}
              {% set r = int(inputval[1:3], 16) %}
              {% set g = int(inputval[3:5], 16) %}
              {% set b = int(inputval[5:7], 16) %}
              {% set color_attrs = {'rgb_color': [r, g, b]} %}
            {% else %}
              {% set color_attrs = {'color_name': inputval} %}
            {% endif %}
            {% set color_attrs = color_attrs.update({'transition': 1}) %}
            {{ color_attrs }}

    - conditions:
        # Botão Direito - Pressão Curta
        - condition: template
          value_template: "{{ command == '4_short_release' }}"
      sequence:
        - service: input_select.select_next
          data:
            entity_id: !input color_set
        - service: light.turn_on
          target: !input light
          data: >
            {% set inputval = states(color_set) %}
            {% set color_attrs = {} %}
            {% if inputval|int(-1) != -1 %}
              {% set color_attrs = {'color_temp_kelvin': inputval} %}
            {% elif inputval.startswith('#') %}
              {% set r = int(inputval[1:3], 16) %}
              {% set g = int(inputval[3:5], 16) %}
              {% set b = int(inputval[5:7], 16) %}
              {% set color_attrs = {'rgb_color': [r, g, b]} %}
            {% else %}
              {% set color_attrs = {'color_name': inputval} %}
            {% endif %}
            {% set color_attrs = color_attrs.update({'transition': 1}) %}
            {{ color_attrs }}

    - conditions:
        # Botão Esquerdo - Pressão Longa
        - condition: template
          value_template: "{{ command == '3_long_press' }}"
      sequence: !input button_left_long

    - conditions:
        # Botão Direito - Pressão Longa
        - condition: template
          value_template: "{{ command == '4_long_press' }}"
      sequence: !input button_right_long

mode: restart
max_exceeded: silent
